Java is a high-level, object-oriented programming language,It’s designed to be platform-independent,
meaning code written in Java can run on any device that has a Java Virtual Machine (JVM).

----------------------------------------------------------------------------------------------------------------------------------
what is bytecode?
- Bytecode is the intermediate code generated by the Java compiler after compiling source code.
- It is a platform-independent code executed by the Java Virtual Machine (JVM).
- Bytecode files have the `.class` extension.
-------------------------------------------------------------------------------------------------------------
Heap & Garbage collector.
- The memory area in JVM where objects are created is called the **Heap**.
- Heap is divided into **young space** and **old space**.
- Memory is freed at runtime by a special thread called the **Garbage Collector**.
- Garbage Collector finds objects not needed by the program and **destroys** them.
- Newly allocated objects are placed in young space; when full, garbage collector frees memory.
- Objects that survive long in young space are moved to old space; when old space is full, garbage collector frees space in heap.
---------------------------------------------------------------------------------------------------------------------------------------------
- **How Java Works:**
  - **Depends on JVM (Java Virtual Machine)**
  - **Code Compilation:**
    - Java source (`.java`) compiled by Java compiler to Java bytecode (`.class`)
    - Bytecode can move locally or via network
  - **Run-time Environment:**
    - **Class Loader & Bytecode Verifier:** Loads classes, checks code integrity
    - **Java Class Libraries:** Provide standard functionality
    - **JVM Components:**
      - **Java Interpreter & Just-In-Time (JIT) Compiler:** Execute bytecode
      - **Garbage Collector:** Manages memory (heap)
      - **Runtime System:** Interfaces with OS
    - **Operating System & Hardware:** Final execution layer

- **Key Points:**
  - Compilation to bytecode enables platform independence
  - JVM interprets/compiles bytecode at runtime for execution
  - Just-In-Time compiler increases execution speed
------------------------------------------------------------------------------------------------------------------------------
- Every Java program must be inside a class with a class name.

- The main method in Java:
  - `public`
    - Makes the function accessible globally across all programs.
  - `static`
    - Lets you access the method without creating an object of the class.
  - `void`
    -is The return type—main this means main does not return any value.
  - `main(String[] args)`
    - `main` is the function called by the JVM.
    - `String[] args` holds command line arguments.
------------------------------------------------------------------------------------------------------------------------------
- **Java Primitive Data Types:**
  - **Integer Types:**
    - `byte` (1 byte)
    - `short` (2 bytes)
    - `int` (4 bytes)
    - `long` (8 bytes)
  - **Float Types:**
    - `float` (4 bytes)
    - `double` (8 bytes)
  - **Character Type:**
    - `char` (2 bytes)
  - **Boolean Type:**
    - `boolean` (1 byte, uses only 1 bit)
---------------------------------------------------------------------------------------------------------------------
Data Operations
- **Arithmetic Operators:**
  - `+` Addition
  - `-` Subtraction
  - `*` Multiplication
  - `/` Division
  - `%` Modulus

- **Unary Operators:**
  - `++` Increment
  - `--` Decrement

- **Relational Operators:**
  - `<` Less than
  - `<=` Less than or equal to
  - `>` Greater than
  - `>=` Greater than or equal to
  - `!=` Not equal to
  -  `=` Equal to
  -  `==`  Double Equals

-** Logical Operators:**
 -  `&&` And
 -  `||` Or
 -  `!`  Not
 ------------------------------------------------------------------------------------------------------------------
- **for loop syntax:**
  - `for (initialization; condition; expression)`
    - **initialization**: set up variable, runs once at start
    - **condition**: checked before each loop, loop runs if true
    - **expression**: update variable (increment/decrement), runs after each loop iteration

- **for loop flow:**
  - Start
  - Initialization of variable
  - Check condition:
    - If **true**: execute statements → increment/decrement → repeat
    - If **false**: stop loop
---------------------------------------------------------------------------------------------------------------------
- **while loop** is a looping statement in Java, similar to the for loop but without initialization and expression sections.
- **Syntax:** `while (condition) { st-1; st-2; }

  - The loop runs as long as **condition** is true.
  - Inside the braces, one or more statements (`st-1`, `st-2`, etc.) are executed.

- If the **condition** is satisfied:
  - The statements inside the loop are executed.
- If the **condition** is not satisfied:
  - The loop stops, and the statements are not executed.

- **Flowchart:**
  - Start → Check Condition:
    - If true: Execute statements, then check condition again.
    - If false: Stop.
------------------------------------------------------------------------------------------------------------------------------------
- do..while loop is also another looping statement.
- Syntax of while loop is
  `do {st-1; st-2;}while (condition);`
- st-1 and st-2 will be executed first and while condition is executed at the end.
- If the condition is found true, then looping statements (st-1 and st-2) will be executed again.
- This process will be repeated until the condition is found false.
- Please note that while condition has to be terminated by “;” here.
